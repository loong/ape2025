# Interactive Art Image Streaming Application - PRD

## Project Overview
An interactive art installation that displays streams of images from a Python backend on multiple web canvases. Each canvas has a unique identifier (slug) and can receive independent image streams. The system supports both pre-generated image streaming and real-time image generation using SDXL-Turbo. This PRD focuses on building the core image streaming functionality with support for multiple canvases and AI image generation.

## Core Requirements

### Backend (Python)
- Create a Python backend capable of:
  - Loading images using Pillow
  - Streaming these images to specific web canvases at up to 4 FPS
  - Tracking and sending timestamps for each image
  - Managing multiple canvas connections independently
  - Generating images using SDXL-Turbo via gRPC
  - Running locally (no cloud deployment needed at this stage)

### Frontend (Web)
- Create a minimal, distraction-free web interface that:
  - Displays multiple canvases, each with a unique identifier
  - Shows images streamed from the Python backend to specific canvases
  - Shows timestamps for when images change
  - Has no visible buttons or controls
  - Can handle images up to 4K resolution (though initial implementation will use 500-800px images)
  - Takes up the full viewport with no UI chrome
  - Uses responsive design to adapt to different screen sizes

### Communication Protocol
- Implement WebSockets for real-time, low-latency communication between frontend and backend
- Support canvas-specific WebSocket connections using unique slugs
- Ensure the system can maintain close to 4 FPS streaming rate per canvas
- Use gRPC for communication with the SDXL-Turbo service

## Technical Specifications

### Backend
- **Language/Framework**: Python 3.8+ with FastAPI
- **Image Processing**: Pillow
- **WebSocket Library**: FastAPI's built-in WebSocket support
- **Development Server**: Uvicorn
- **Canvas Management**: WebSocketManager class for connection tracking
- **Image Generation**: SDXL-Turbo gRPC service
- **Modular Structure**:
  - `main.py`: Application entry point and routing
  - `config.py`: Configuration settings and constants
  - `websocket_manager.py`: WebSocket connection handling
  - `image_handler.py`: Image processing and sending
  - `inference_client.py`: SDXL-Turbo service interaction

### Frontend
- **Framework**: React (widely used and well-supported)
- **WebSocket Client**: native WebSocket API or socket.io-client
- **Styling**: Minimal CSS, potentially using styled-components
- **Canvas Component**: Reusable React component for individual canvases

### Communication
- **Protocol**: WebSockets for canvas communication, gRPC for SDXL-Turbo
- **Data Format**: JSON for metadata with Base64-encoded images
- **Message Structure**:
  ```json
  {
    "timestamp": "2025-04-15T14:30:00.000Z",
    "image": "base64_encoded_image_data_here",
    "image_id": "unique_identifier"
  }
  ```

## Implementation Details

### Backend (Python)

#### Modular Structure
The backend is organized into several modules:

1. `config.py`: Contains all configuration settings and constants
2. `websocket_manager.py`: Handles WebSocket connections and lifecycle
3. `image_handler.py`: Manages image processing and sending
4. `inference_client.py`: Handles SDXL-Turbo service interactions
5. `main.py`: Main application entry point with FastAPI routes

#### WebSocket Connection Handling
```python
@app.websocket("/ws/{canvas_slug}")
async def websocket_endpoint(websocket: WebSocket, canvas_slug: str):
    if not await ws_manager.connect(websocket, canvas_slug):
        return

    try:
        while True:
            await websocket.receive_text()
    except WebSocketDisconnect:
        logger.info(f"Client disconnected normally from canvas '{canvas_slug}'")
    except Exception as e:
        logger.error(f"Connection error for canvas '{canvas_slug}': {str(e)}")
    finally:
        await ws_manager.disconnect(websocket, canvas_slug)
```

#### Image Generation and Streaming
```python
@app.get("/test-inference")
async def test_inference(prompt: str = DEFAULT_PROMPT):
    """Test endpoint that generates images using SDXL-Turbo."""
    left_connections = ws_manager.get_connections("left-canva")
    right_connections = ws_manager.get_connections("right-canva")
    
    if not right_connections:
        return {"error": "No active connections for right canvas"}
        
    # Send test image to left canvas
    test_img = Image.open(TEST_IMAGE_PATH)
    await ImageHandler.send_image(test_img, left_connections, "left-canva")
    
    # Generate and stream images to right canvas
    images = inference_client.generate_images(prompt)
    for img in images:
        img = ImageHandler.resize_image(img, test_img.size[0], test_img.size[1])
        await ImageHandler.send_image(img, right_connections, "right-canva")
        await asyncio.sleep(IMAGE_SEND_INTERVAL)
```

#### Main Function
```python
if __name__ == "__main__":
    # Create test_images directory if it doesn't exist
    os.makedirs("test_images", exist_ok=True)
    logger.info("Starting server...")
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
```

### Frontend (React)

#### Canvas Component
```jsx
function Canvas({ slug }) {
  const [imageData, setImageData] = useState(null);
  const [timestamp, setTimestamp] = useState(null);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    const ws = new WebSocket(`ws://localhost:8000/ws/${slug}`);
    
    ws.onopen = () => {
      console.log(`Connected to the server for ${slug}`);
      // Keep connection alive
      setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send('ping');
        }
      }, 30000);
    };
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setImageData(`data:image/jpeg;base64,${data.image}`);
      
      // Format timestamp for display
      const date = new Date(data.timestamp);
      setTimestamp(date.toLocaleTimeString() + '.' + 
                  date.getMilliseconds().toString().padStart(3, '0'));
    };
    
    ws.onerror = (error) => {
      console.error(`WebSocket error for ${slug}:`, error);
    };
    
    ws.onclose = () => {
      console.log(`Disconnected from the server for ${slug}`);
    };
    
    setSocket(ws);
    
    // Cleanup on component unmount
    return () => {
      if (ws) {
        ws.close();
      }
    };
  }, [slug]);

  return (
    <div className="canvas-container">
      <div className="image-container">
        {imageData ? (
          <img src={imageData} alt={`Streamed content for ${slug}`} />
        ) : (
          <div className="placeholder">Waiting for image stream...</div>
        )}
      </div>
      {timestamp && <div className="timestamp">{timestamp}</div>}
      <div className="canvas-label">{slug}</div>
    </div>
  );
}
```

#### App Component
```jsx
function App() {
  return (
    <div className="app-container">
      <Canvas slug="left-canva" />
      <Canvas slug="right-canva" />
    </div>
  );
}
```

## Testing and Development

### Running the Backend
1. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

2. Ensure SDXL-Turbo service is running:
   ```
   cd models/sdxl-turbo
   python server.py
   ```

3. Run the main application:
   ```
   cd psyche/backend
   python main.py
   ```

### Running the Frontend
1. Create a new React app:
   ```
   npx create-react-app image-stream-frontend
   cd image-stream-frontend
   ```

2. Replace the src/App.js and src/App.css files with the code provided above.

3. Start the development server:
   ```
   npm start
   ```

## Next Steps and Future Enhancements
1. Add the audio input processing to influence image generation
2. Implement image transitions/effects
3. Add multi-display support if needed
4. Optimize image streaming for better performance
5. Implement security measures before public deployment
6. Add dynamic canvas creation/removal
7. Implement canvas-specific image processing
8. Add support for different image generation models
9. Implement batch processing for multiple canvases

## Performance Considerations
- Monitor CPU and memory usage during extended operations
- Implement adaptive quality based on connection speed
- Consider using WebP format for better compression while maintaining quality
- Implement proper error handling and recovery mechanisms
- Monitor connection counts per canvas to prevent overload
- Optimize gRPC communication with SDXL-Turbo service
- Implement proper cleanup of resources in all modules